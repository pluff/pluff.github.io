<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Addicted to Ruby, In love with the Web]]></title>
  <link href="http://shutsin.com/atom.xml" rel="self"/>
  <link href="http://shutsin.com/"/>
  <updated>2014-03-21T00:48:29+03:00</updated>
  <id>http://shutsin.com/</id>
  <author>
    <name><![CDATA[Pavel Shutsin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS and Identity map]]></title>
    <link href="http://shutsin.com/2014/03/20/angularjs-and-identity-map/"/>
    <updated>2014-03-20T22:52:00+03:00</updated>
    <id>http://shutsin.com/2014/03/20/angularjs-and-identity-map</id>
    <content type="html"><![CDATA[<h4>Praise AngularJS</h4>

<p>AngularJS is marvelous! It&rsquo;s very neat framework for developing frontend applications.
Great module structure allows AngularJS community enrich and supplement Angular environment with new libraries.
Angular became kind of trendy in modern web development i.e. has bright future.
Last, but not least, big names stand behind Angular.</p>

<h4>Journey has just begun</h4>

<p>With all these advantages AngularJS environment is still far behind in comparision with Ruby as an example.
So you have to implement some libraries on your own (omg! that&rsquo;s not fair!) before you can write you old good CRUD.</p>

<p>Identity map is one of them.</p>

<h4>Identity map. What&rsquo;s the problem?</h4>

<p>I&rsquo;ll start with an example. Lets say we have an API that returns users and universities.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// GET /api/users/1</span>
</span><span class='line'><span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Bob&#39;</span><span class="p">,</span> <span class="nx">attented_universities</span><span class="o">:</span> <span class="p">[{</span><span class="nx">id</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Oxford&#39;</span><span class="p">}]}</span>
</span><span class='line'><span class="c1">// GET /api/universities</span>
</span><span class='line'><span class="p">[{</span><span class="nx">id</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;MIT&#39;</span><span class="p">},</span> <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Stanford&#39;</span><span class="p">},</span> <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Oxford&#39;</span><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Whenever you call for these API with <code>$http</code>, <code>$resource</code> or <code>Restangular</code> you will receive brand new object every time.
This behavior causes several problems:</p>

<ol>
<li>You get plenty of objects for one single model entity.</li>
<li>All these objects will not be treated as equal by built in javascript comparision.</li>
<li>Multiple objects for one model entity can cause data inconsistency.</li>
</ol>


<!-- more -->


<p>In real rich applications the problems become dramatically bigger and can overwhelm you really quickly.
Imagine there are 10 call on the page and each returns its own instance object of the same university.</p>

<h4>Identity map. How we can fix it?</h4>

<p>Whenever we receive an object from API call we can store it in a separate map object called &ldquo;identity map&rdquo;.</p>

<p>Then whenever we receive an object again we can merge fresh object with old one, discard fresh object and keep using old one.</p>

<p>This &ldquo;identity map&rdquo; object will give guarantee that only one instance of same object exists in the app and all pointers reference to the same object stored in &ldquo;identity map&rdquo;.</p>

<p>In order to map objects correctly we need good way to identify them. Every object must have an universal id which is guaranteed to be unique.
Often a pair of model id and model class name is used for this <code>uid</code>. Using this <code>uid</code> our identity map can store and retrieve objects.</p>

<p>Possible AngularJS implementation could look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">module</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;identity-map&#39;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">service</span><span class="p">(</span><span class="s1">&#39;identityMap&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">map</span> <span class="o">=</span> <span class="p">{};</span> <span class="c1">// This is our map object. we will store all objects here.</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">map</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">angular</span><span class="p">.</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">isDefined</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">uid</span><span class="p">))</span> <span class="p">{</span> <span class="c1">//if object has an uid</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">mappedObject</span> <span class="o">=</span> <span class="nx">map</span><span class="p">[</span><span class="nx">obj</span><span class="p">.</span><span class="nx">uid</span><span class="p">];</span> <span class="c1">// search for already loaded object with the same uid</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">mappedObject</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// if &quot;old&quot; object found</span>
</span><span class='line'>          <span class="nx">angular</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">mappedObject</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span> <span class="c1">// merge old object with new one</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="c1">// if &quot;old&quot; object wasn&#39;t found</span>
</span><span class='line'>          <span class="nx">map</span><span class="p">[</span><span class="nx">obj</span><span class="p">.</span><span class="nx">uid</span><span class="p">]</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span> <span class="c1">// save our &quot;new&quot; object to the map</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">map</span><span class="p">[</span><span class="nx">obj</span><span class="p">.</span><span class="nx">uid</span><span class="p">]</span> <span class="c1">//return object from the map.</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="c1">//if object doesnt have an id just ignore it.</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">obj</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>and somewhere in a service or controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">....</span>
</span><span class='line'><span class="nx">obj</span> <span class="o">=</span> <span class="nx">identityMap</span><span class="p">.</span><span class="nx">map</span><span class="p">({</span><span class="nx">uid</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Alice&#39;</span><span class="p">});</span>
</span><span class='line'><span class="nx">obj2</span> <span class="o">=</span> <span class="nx">identityMap</span><span class="p">.</span><span class="nx">map</span><span class="p">({</span><span class="nx">uid</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Bob&#39;</span><span class="p">});</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Bob</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj2</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Bob</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span> <span class="o">===</span> <span class="nx">obj2</span><span class="p">);</span> <span class="c1">// true. both variables references to the same object.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now our life of AngularJS developer became much easier because we don&rsquo;t have to track consistency between objects and we have less objects stored through application lifecycle.</p>

<p>The example above shows only basic functionality. You can check <a href="https://github.com/pluff/angular-identity-map"><strong>angular-identity-map</strong></a> module for more feature-rich implementation. Contribution is appreciated too.
&ldquo;angular-identity-map&rdquo; supports embedded objects, collection of objects and integration with Restangular.</p>

<h4>Identity map. Advanced</h4>

<p>Today we&rsquo;ve covered easy half of identity map. Caching is another feature identity map is used for.
The idea is to return an object from a map even before Angular (via Restangular, $http or $resource) sends a request to API.
There are many nuances in this idea, so we&rsquo;ll cover it in another post some day.</p>

<h4>Identity map. Backside</h4>

<p>When I said identity map pattern reduces quantity of objects created via API calls I didn&rsquo;t lied.</p>

<p>Another truth is that identity map reduces quantity of objects destroyed. Every object you store in a map will not be destroyed even if its not used anywhere else in the app. So potentially your AngularJS can store all API response objects in a map.</p>

<p>You need to keep that in mind while using identity map with AngularJS as well as writing regular AngularJS services. For those who didn&rsquo;t know &ndash; AngularJS services are singletones so they persist throught entire AngularJS app lifecycle.</p>

<p>That&rsquo;s it for now and I&rsquo;ll see you next time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Decorate your models in two ways]]></title>
    <link href="http://shutsin.com/2014/03/04/decorate-your-models-in-two-ways/"/>
    <updated>2014-03-04T23:08:00+03:00</updated>
    <id>http://shutsin.com/2014/03/04/decorate-your-models-in-two-ways</id>
    <content type="html"><![CDATA[<p><img src="http://shutsin.com/images/2014-03-04-decorate-your-models-in-two-ways.png" class="center" itemprop="image"></p>

<h4>Intro</h4>

<p><a href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</a> is a common design pattern which allows us to add behavior to individual objects.
Ruby simplicity and flexibility provides several ways to implement it. Today we will write a couple of implementations and will do an overview of existing gems.</p>

<h4>Keep our model as clean as possible</h4>

<p>In MVC world decorators are widely used for adding presentation logic methods to a model without polluting a model class.
Let&rsquo;s say we have very simple <code>User</code> model and special logic for displaying user&rsquo;s full name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">:title</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">full_name</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">title</span> <span class="o">==</span> <span class="s2">&quot;Doctor&quot;</span>
</span><span class='line'>      <span class="s2">&quot;</span><span class="si">#{</span><span class="n">title</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">title</span>
</span><span class='line'>      <span class="s2">&quot;</span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">title</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="s2">&quot;</span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Short and simple, however it provides one nasty side effect as your project grows.</p>

<!-- more -->


<p>Imagine there are 50 similar methods for various view-related stuff. Your model will become a mess in a blink of an eye!
If you came from Rails world you can use Rails helpers and move all representation methods there:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MyHelpers</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">user_full_name</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>   <span class="c1">#code</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#and then in views &lt;%= user_full_name(user) %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That will work, however it&rsquo;s hard to maintain and it goes against Ruby object oriented nature.
Another solution could be to move all extra methods to a separate module and include in our class</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">:title</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">include</span> <span class="no">UserViewMethods</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This solutions works fine, but it still adds plenty of methods to your User class even when you might not need it.
We can do better than that! We can keep our models as clean as we can and move our view helpers to another layer.</p>

<h4>Wrap me a model, please</h4>

<p>Lets create a new class <code>UserDecorator</code> that wraps our User object and adds additional method on top of it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserDecorator</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:user</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">full_name</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@user</span><span class="o">.</span><span class="n">title</span> <span class="o">==</span> <span class="s1">&#39;Doctor&#39;</span>
</span><span class='line'>      <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@user</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="vi">@user</span><span class="o">.</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="vi">@user</span><span class="o">.</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">title</span>
</span><span class='line'>      <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@user</span><span class="o">.</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="vi">@user</span><span class="o">.</span><span class="n">last_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="vi">@user</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@user</span><span class="o">.</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="vi">@user</span><span class="o">.</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#Usage example</span>
</span><span class='line'><span class="n">decorated_user</span> <span class="o">=</span> <span class="no">UserDecorator</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'><span class="n">decorated_user</span><span class="o">.</span><span class="n">user</span>
</span><span class='line'><span class="n">decorated_user</span><span class="o">.</span><span class="n">full_name</span>
</span></code></pre></td></tr></table></div></figure>


<p>Whenever we want to call a method on a model itself we have to write <code>decorated_user.user.my_method</code> which is so inconvinient!
We can get rid of it with mighty <code>method_missing</code>!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserDecorator</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@user</span><span class="o">.</span><span class="n">public_send</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#Usage example</span>
</span><span class='line'><span class="n">decorated_user</span> <span class="o">=</span> <span class="no">UserDecorator</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'><span class="n">decorated_user</span><span class="o">.</span><span class="n">first_name</span> <span class="c1">#delegates to User#first_name</span>
</span><span class='line'><span class="n">decorated_user</span><span class="o">.</span><span class="n">full_name</span>
</span></code></pre></td></tr></table></div></figure>


<p>Feels much better! Now our decorator pretends to be a User and delegates all undefined method calls to user object. Oh, wait a second&hellip;
<code>decorated_user.respond_to? :first_name #=&gt; false</code> ouch!
<code>respond_to?</code> returns false unless there is a defined method on our class,
so we need UserDecorator to be a even more like User and treat all User.instance_methods as its own.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserDecorator</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@user</span><span class="o">.</span><span class="n">public_send</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">respond_to?</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span> <span class="o">||</span> <span class="vi">@user</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>One step closer to success! Obviously we can delegate class methods and constants to User class as well.
This approach is implemented in the most popular presenters gem for Rails called <a href="https://github.com/drapergem/draper">Draper</a>.
You can check <a href="https://github.com/drapergem/draper/blob/594816661e0c6c48d6137f4472b8c731c3dd8df8/lib/draper/automatic_delegation.rb">this file</a> for details.
Draper is a great and very rich featured gem but imvho it has a bit of &ldquo;swiss army knife&rdquo; syndrome.</p>

<p>There is a couple weak places in this approach:</p>

<ol>
<li>Our decorator class pretends to be a User but it&rsquo;s not a User! <code>decorated_user.is_a? User #=&gt; false</code></li>
<li><code>method_missing</code> is relatively slow. See below for benchmarks.</li>
</ol>


<p>Let&rsquo;s think how we can decorate our model even better.</p>

<h4>Extend me if you want!</h4>

<p>As it was mentioned before we can create a module and move all presentation methods there. But should we include it in class definition?
Can we add these methods to our model only when we really need it? Yes we can!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">:title</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">UserDecorator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">full_name</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">title</span> <span class="o">==</span> <span class="s1">&#39;Doctor&#39;</span>
</span><span class='line'>      <span class="s2">&quot;</span><span class="si">#{</span><span class="n">title</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">title</span>
</span><span class='line'>      <span class="s2">&quot;</span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">title</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="s2">&quot;</span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can add presentation methods to our object right before we need them(e.g. right before rendering a view).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="c1"># do something with clean model object</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">extend</span> <span class="no">UserDecorator</span> <span class="c1">#now we have additional methods in this particular instance</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">full_name</span> <span class="c1">#=&gt; String object</span>
</span><span class='line'><span class="n">another_user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">another_user</span><span class="o">.</span><span class="n">full_name</span> <span class="c1">#=&gt; exception. User class has no such method.</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also overwrite base User methods if you want.
This approach allows us to add presentational methods per instance and keep our model class clean.
Our decorated object does not pretend to be a User anymore, it is a User!
Second most popular gem for Rails presenters called <a href="https://github.com/amatsuda/active_decorator">active_decorator</a> has similar implementation with some additional features.
You can check <a href="https://github.com/amatsuda/active_decorator/blob/af3b6c60718106496b4acacd816325b00cfb873a/lib/active_decorator/decorator.rb#L31">this file</a> for details.</p>

<p>Of course there is no free cheese in this world and we need to pay the price.</p>

<p>Weak places of this approach:</p>

<ol>
<li>calling Object#extend is expensive.</li>
</ol>


<h4>Passing additional params to our decorators</h4>

<p>In real world there are use cases when you need additional params in your representation methods.
With decoration &ldquo;wrapper&rdquo; class it&rsquo;s as easy as adding additional parameters to initialize method.
With &ldquo;extending&rdquo; it&rsquo;s slightly more complex since you can&rsquo;t pass additional params to extend method, so you have to add them after extending.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">:title</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">UserDecorator</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:my_param</span>
</span><span class='line'>  <span class="c1">#....</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">u</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">u</span><span class="o">.</span><span class="n">extend</span> <span class="no">UserDecorator</span>
</span><span class='line'><span class="n">u</span><span class="o">.</span><span class="n">my_param</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also we can encapsulate decoration logic in separate method (e.g. <code>decorate</code>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>   <span class="c1">#...</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">decorate</span>
</span><span class='line'>     <span class="nb">self</span><span class="o">.</span><span class="n">extend</span> <span class="no">UserDecorator</span>
</span><span class='line'>     <span class="k">yield</span> <span class="nb">self</span> <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">decorate</span> <span class="p">{</span> <span class="o">|</span><span class="n">u</span><span class="o">|</span> <span class="n">u</span><span class="o">.</span><span class="n">my_param</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Benchmarks. Can I take a nap while it works?</h4>

<p>Are you curious what&rsquo;s the real performance numbers for both approaches? So do I! Here is the test I used for benchmarking:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;benchmark&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">base_method</span>
</span><span class='line'>    <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UserDecoratorClass</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@user</span><span class="o">.</span><span class="n">send</span> <span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">UserDecoratorModule</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="mi">1_000_000</span>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">bm</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;User.new&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">n</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">u</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">;</span> <span class="n">u</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Wrap    &quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">n</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">u</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">;</span> <span class="no">UserDecoratorClass</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">u</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Extend  &quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">n</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">u</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">;</span> <span class="n">u</span><span class="o">.</span><span class="n">extend</span> <span class="no">UserDecoratorModule</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">u_wrap</span> <span class="o">=</span> <span class="no">UserDecoratorClass</span><span class="o">.</span><span class="n">new</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">u_ext</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">extend</span> <span class="no">UserDecoratorModule</span>
</span><span class='line'>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">bm</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Wrap    &quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">n</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">u_wrap</span><span class="o">.</span><span class="n">base_method</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Extend  &quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">n</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">u_ext</span><span class="o">.</span><span class="n">base_method</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>First benchmark row shows us the time Ruby spends for creating simple object.
Second one represents time spent for decorating via &ldquo;wrapping&rdquo;.
Third row represents time spent for decorating via extending.
Last 2 rows represent time spent for calling <code>User#base_method</code> for &ldquo;wrapping&rdquo; and extending approaches respectively.
Here is the results:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#Ruby 1.9.3</span>
</span><span class='line'>       <span class="n">user</span>     <span class="nb">system</span>      <span class="n">total</span>        <span class="n">real</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">new</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">230000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">230000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">236019</span><span class="p">)</span>
</span><span class='line'><span class="no">Wrap</span>      <span class="mi">0</span><span class="o">.</span><span class="mi">530000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">530000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">531092</span><span class="p">)</span>
</span><span class='line'><span class="no">Extend</span>    <span class="mi">1</span><span class="o">.</span><span class="mi">390000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">010000</span>   <span class="mi">1</span><span class="o">.</span><span class="mi">400000</span> <span class="p">(</span>  <span class="mi">1</span><span class="o">.</span><span class="mi">391936</span><span class="p">)</span>
</span><span class='line'>       <span class="n">user</span>     <span class="nb">system</span>      <span class="n">total</span>        <span class="n">real</span>
</span><span class='line'><span class="no">Wrap</span>      <span class="mi">0</span><span class="o">.</span><span class="mi">330000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">330000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">329640</span><span class="p">)</span>
</span><span class='line'><span class="no">Extend</span>    <span class="mi">0</span><span class="o">.</span><span class="mi">100000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">100000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">102596</span><span class="p">)</span>
</span><span class='line'><span class="c1">#Ruby 2.1.0</span>
</span><span class='line'>       <span class="n">user</span>     <span class="nb">system</span>      <span class="n">total</span>        <span class="n">real</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">new</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">170000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">170000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">170953</span><span class="p">)</span>
</span><span class='line'><span class="no">Wrap</span>      <span class="mi">0</span><span class="o">.</span><span class="mi">380000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">380000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">383857</span><span class="p">)</span>
</span><span class='line'><span class="no">Extend</span>    <span class="mi">2</span><span class="o">.</span><span class="mi">140000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">010000</span>   <span class="mi">2</span><span class="o">.</span><span class="mi">150000</span> <span class="p">(</span>  <span class="mi">2</span><span class="o">.</span><span class="mi">144567</span><span class="p">)</span>
</span><span class='line'>       <span class="n">user</span>     <span class="nb">system</span>      <span class="n">total</span>        <span class="n">real</span>
</span><span class='line'><span class="no">Wrap</span>      <span class="mi">0</span><span class="o">.</span><span class="mi">250000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">250000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">241658</span><span class="p">)</span>
</span><span class='line'><span class="no">Extend</span>    <span class="mi">0</span><span class="o">.</span><span class="mi">080000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">080000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">083517</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we can see &ldquo;wrapping&rdquo; an object is almost 4 times faster (more than 9 times faster with Ruby 2.1.0).
On the other side method calls from undecorated base class is roughly 3 times faster with &ldquo;extend&rdquo; approach.
If your views use a lot of method calls per object then extending will work faster.
If you have plenty of small objects and low method calls frequency then &ldquo;wrapping&rdquo; will work faster for you.</p>

<h4>Conclusion</h4>

<p>There are several ways how to deal with presentation logic in Ruby. Using decoration classes is more classic well-known implementation, however it doesn&rsquo;t fits well with Ruby ideology with duck-typing and all that jazz.
Using modules and &ldquo;Object#extend&rdquo; provides us another way how to decorate our models with additional methods. It uses full power of Ruby object model and will come out with better performance in majority of use-cases.
Both methods have their weaknesses and you just need to choose what fits you better.</p>

<p>Thanks, and see you next time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails and background jobs]]></title>
    <link href="http://shutsin.com/2013/10/18/rails-and-background-jobs/"/>
    <updated>2013-10-18T16:44:00+03:00</updated>
    <id>http://shutsin.com/2013/10/18/rails-and-background-jobs</id>
    <content type="html"><![CDATA[<p><img src="http://shutsin.com/images/2013-10-18-rails-and-background-jobs.png" class="center" itemprop="image"></p>

<p>Background jobs concept is a great way to postpone some tasks to another thread.
Today I&rsquo;ll show you how we can use it with Rails and make our application a bit (or a lot) faster.</p>

<h4>Initial state</h4>

<p>Lets say we have user model with <code>email</code> attribute and we want to send email to
administrator each time user email changes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">after_save</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
</span><span class='line'>    <span class="n">send_email</span> <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">email_changed?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>Let&rsquo;s assume that <code>send_email</code> method represents &ldquo;all things that should be done&rdquo;.
We don&rsquo;t care much about its implementation.
Example above works perfectly but has one weakness. What will happen if <code>send_email</code> method takes 10 seconds to run?
User will have to wait for ten seconds.
What can we do about that?</p>

<h4>Resque to the resque!</h4>

<p>We can move execution of our <code>send_email</code> method to separate process.
<a href="https://github.com/resque/resque">Resque</a> is the most popular among the <a href="https://www.ruby-toolbox.com/categories/Background_Jobs">plenty of gems</a> for background jobs.
Resque stores all background jobs in a queue (or multiple queues) in Redis and processes it later within another processes (workers).
Let&rsquo;s rewrite example code with Resque.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">after_save</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
</span><span class='line'>    <span class="no">Resque</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="no">Mailer</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span> <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">email_changed?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Mailer</span>
</span><span class='line'>  <span class="vi">@queue</span> <span class="o">=</span> <span class="s2">&quot;mailer_queue&quot;</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">perform</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">send_email</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When user email is changed Resque will enqueue <code>Mailer.perform</code> method call with model id as param.
<code>Mailer.perform</code> method will actually be called in another process.
Resque implementation is not the main topic of this post, so, if you want to learn more about Resque check this great <a href="http://railscasts.com/episodes/271-resque">RailsCast</a>.
From this point I&rsquo;ll assume that you understand the concept of background jobs.</p>

<h4>New problems</h4>

<p>Moving <code>send_email</code> method execution to separate process was a great idea, but it brought a small problem.
Sometimes when Resque tries to call <code>Mailer.perform</code> it throws an exception &ldquo;User with id XXX was not found&rdquo;.
According to <a href="http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html">ActiveRecord::Callbacks</a> <code>after_save</code>
callback is performed when DB transaction is not committed yet. That&rsquo;s why <code>User.find</code> can&rsquo;t find User.
As you might already understand I was too eager with enqueue.</p>

<p><strong>Always use after_commit instead of after_create\after_update\after_save for background jobs</strong>.</p>

<p>That&rsquo;s the golden rule. <code>after_commit</code> ensures that transaction was successfully committed to DB and all records were stored.
Lets update the code!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">after_commit</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
</span><span class='line'>    <span class="no">Resque</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="no">Mailer</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span> <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">email_changed?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#...</span>
</span></code></pre></td></tr></table></div></figure>


<p>That should work. Oh wait&hellip; it doesn&rsquo;t!</p>

<h4>after_commit limitations and the ways to deal with them</h4>

<p>The code above never enqueues mail sending because <code>user.email_changed?</code> is always false.
For some reason <a href="http://api.rubyonrails.org/classes/ActiveModel/Dirty.html">dirty</a> state of
our model resets before <code>after_commit</code> callback is executed, so every <code>xxx_changed?</code> returns false and every <code>xxx_was</code>
does NOT return old values.</p>

<p>In <code>after_save</code> we CAN&rsquo;T enqueue because we can&rsquo;t be sure record is already saved to DB properly.
In <code>after_commit</code> we DON&rsquo;T have access to previous state of our model.
Here is where the concept of promises comes to play.</p>

<p>Let&rsquo;s think about what we CAN do at each of these callbacks.
In <code>after_save</code> we can say if we should enqueue or not as we can check if email is changed or not.
In <code>after_commit</code> we can just enqueue a background job.
So, our solution is to promise to enqueue the job as soon as we can enqueue. Simple implementation looks like that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:need_enqueue</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after_save</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
</span><span class='line'>    <span class="n">need_enqueue</span> <span class="o">=</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">email_changed?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after_commit</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
</span><span class='line'>    <span class="no">Resque</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="no">Mailer</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span> <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">need_enqueue</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">need_enqueue</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally it works! I want to point out that the concept of promises can be skipped if we don&rsquo;t need any dirty attribute in our <code>after_commit</code> callback.
E.g. Lets assume than our business requirement was the following: &ldquo;Send a email to admin each time user is created.&rdquo;
In this case implementation is as simple as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">after_commit</span><span class="p">,</span> <span class="ss">on</span><span class="p">:</span> <span class="ss">:create</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
</span><span class='line'>    <span class="no">Resque</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="no">Mailer</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#...</span>
</span></code></pre></td></tr></table></div></figure>


<p>As my last point I want to mention that callback above can be moved to observer.
As for me I like observers a lot so I usually move all accompanying callbacks to observers (e.g. mail sending, logging, cache invalidation etc)</p>

<h4>Summary</h4>

<p>Sometimes background jobs make our response from servers considerably faster by cost of additional code complexity.
Next few rules can help you to avoid common mistakes with integration of background jobs.</p>

<ol>
<li>Always use <code>after_commit</code> for background jobs callbacks to avoid race condition.</li>
<li>Use concept of promises in case you need dirty attributes for callback logic.</li>
<li>Use observers whenever you see that callback logic does not belong to observed model.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Another git branching model]]></title>
    <link href="http://shutsin.com/2013/09/08/another-git-branching-model/"/>
    <updated>2013-09-08T18:42:00+03:00</updated>
    <id>http://shutsin.com/2013/09/08/another-git-branching-model</id>
    <content type="html"><![CDATA[<p>Today I will describe another successful git branching model we use on our project.</p>

<h4>Prehistory</h4>

<p>We tried <a href="http://nvie.com/posts/a-successful-git-branching-model/">git-flow</a> and it appeared to be too complicated for our small team.
After thinking for a while we built up our own workflow that perfectly matches our <a href="http://en.wikipedia.org/wiki/Continuous_delivery">continuous delivery</a> needs.
As a basis we took <a href="http://scottchacon.com/2011/08/31/github-flow.html">github flow</a> which is extremely simple and effective.</p>

<!-- more -->


<h4>Before we start</h4>

<p>This workflow is focused on rapid deployment of any feature as soon as it is ready. Hence, If you have slow and complex QA process this workflow may not work well for you.</p>

<p><strong>For those who don’t want to read long text</strong> there is a TL;DR paragraph at the end.</p>

<h4>Adjustments to github-flow</h4>

<p>Github workflow rules look like this:</p>

<ol>
<li>Anything in the <code>master</code> branch is deployable</li>
<li>To work on something new, create a descriptively named branch off of <code>master</code> (ie: <code>new-oauth2-scopes</code>)</li>
<li>Commit to that branch locally and regularly push your work to the same named branch on the server</li>
<li>When you need feedback or help, or you think the branch is ready for merging, open a <a href="https://help.github.com/articles/using-pull-requests">pull request</a>(PR)</li>
<li>After someone else has reviewed and signed off on the feature, you can merge it into <code>master</code></li>
<li>Once it is merged and pushed to <code>master</code>, you can and should deploy immediately</li>
</ol>


<p>Lets go through each rule.</p>

<ol>
<li>Perfect rule! <code>master</code> should always be stable enough to be deployed to production.</li>
<li>We felt little lack of connection between issue and branch name, so we made slight change
of naming convention. We name branches according to tracker issue numbers (ie: <code>12345</code>).
Lets call these branches &ldquo;feature branches&rdquo;</li>
<li>No changes here. Every feature branch is a workplace. Code can be unstable or incomplete here.</li>
<li>We open pull request only when feature developer thinks he is done with the feature. Don&rsquo;t be
afraid and write descriptive PR titles. Most of code discussions are done via IM or verbally.
After PR have been created CI server runs tests on a feature branch,
other developers review and comment the code, QA team verifies the ticket.
Developers are responsible to keep feature branch up-to-date with <code>master</code> to minimize
possibility of conflicts.</li>
<li>After all conditions of point 4 have been met product
owner/delivery manager/whoever_responsible_for_delivery can merge the branch into <code>master</code>.
It&rsquo;s highly recommended to do this as soon as possible, so <code>master</code> doesn&rsquo;t diverge from feature branch too much.
In 99% product owner is happy to merge and deploy feature as soon as it&rsquo;s ready.
Development team shouldn&rsquo;t merge feature branches since we want product owner to have
control on what should be deployed.</li>
<li>Immediate deploy can be the thing that is not appreciated by business side of the product,
so we keep the right to deploy to product owner. As soon as feature branch is merged development
team should think of it as &ldquo;deployed&rdquo;. Real deploy can happen whenever product owner decides to do it.</li>
</ol>


<h4>Handling large feature packs</h4>

<p>Besides small independent features there can be a large pack of features that doesn&rsquo;t make
much sense without each other. We call such packs &ldquo;epics&rdquo;.</p>

<p>Lets say our project has a redesign planned in 15 tickets. For some reason business side of
the product wants to all these features to be deployed at once, so we can&rsquo;t deploy them as
soon as each of them is ready. First person, who starts to work with ticket related to &ldquo;epic&rdquo;,
starts new epic branch (ie: <code>epic/app_redesign</code>). This &ldquo;epic&rdquo; branch should be treated
like temporary <code>master</code> for all features related to the app redesign. Your pull requests
should point to &ldquo;epic&rdquo; branch. However, you need to base all your branches on <code>master</code>.
After all tickets in &ldquo;epic&rdquo; are done we can create PR to <code>master</code>, do final
review\CI\QA cycle and merge it.</p>

<h4>For those who don&rsquo;t want to read long text above</h4>

<p>Here are all steps summarized.</p>

<ol>
<li><code>master</code> branch should be always deployable to production.</li>
<li>To work on something new, create a branch off of <code>master</code> using feature ticket number (ie: <code>feature/12345</code>)</li>
<li>Commit to that branch locally and regularly push your work to the same named branch on the server</li>
<li>Whenever you think you have finished the feature create a PR to <code>master</code> or to
&ldquo;epic&rdquo; branch in case of &ldquo;epic&rdquo; related feature. (see &ldquo;Handling large feature packs&rdquo;)</li>
<li>After someone else has reviewed the code and QA team signed off on the feature,
product owner can merge it into <code>master</code></li>
<li>Product owner can deploy <code>master</code> to production any time.</li>
</ol>


<h4>Workflow enchancements</h4>

<ul>
<li>It&rsquo;s helpful to have automated mails via github hooks for PRs with unresolved conflicts.
That will help development team to react faster.</li>
<li>The script that will deploy feature-branch + latest <code>master</code> is helpful for QA team.</li>
<li>Github + CI bots help to track CI build status on each feature branch.</li>
</ul>

]]></content>
  </entry>
  
</feed>
